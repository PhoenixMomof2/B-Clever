c
Quiz.find(9).choices.pluck(:answer)
Quiz.find(9).choices
Quiz.find(9)
Quiz.all.sample(2)
Quiz.all.sample
Quiz.all
params
c
possible_choices.sample(1)
possible_choices.sample(2)
possible_choices.sample
possible_choices
correct_choice.update!(answer: total, correct: true)
correct_choice.answer=total
correct_choice.answer=total_to_s
correct_choice
correct_choice.update(answer: total, correct: true)
c
correct_choice.to_h
Array.new
correct_choice
correct_choice(answer: total)
correct_choice.pluck(:answer)
correct_choice.update("answer": total)
correct_choice.answer=total
correct_choice.answer=tottal
correct_choice.answer
possible_choices
correct_choice
c
ch.errors.full_messages
ch
ch.save
ch.correct=false 
ch.errors.full_messages
ch = Choice.create(answer: "32", quiz_id: 70)
ch=_
c = _
Choice.create(answer: "32", quiz_id: 70)
correct_answer
correct_answer = { "answer" => total }
correct_answer = possible_choices.sample
possible_choices
answers
total
@quiz.expression
expression
c
possible_choices.sample
possible_choices
c
choices
c
answers.map{|answer| answer => {@quiz.choices.create(answer: Random.rand(range), correct: false)
answers
c
@quiz.choices.create(answer: Random.rand(range), correct: true)
@quiz.choices.create(answer: Random.rand(range), correct: false)
choices
c
@quiz.choices.pluck(:answer)
@quiz
choices
c
Quiz.find(55).choices
choices
choices.sample
random
total
@quiz.expression
c
choices
@quiz
c
total
@quiz
choices
c
choices.[0]
choices.0
choices
c
Quiz.find(43).choices
@quiz
quiz.choices
choices << total
total
choice
choice.first
choice.1
choices << choice
choices
choices << choice
choice
Hash.new({answer: total.to_s, correct: true, quiz_id: @quiz.id})
Hash.new(answer: total.to_s, correct: true, quiz_id: @quiz.id)
@quiz.id
params
choice[0] = Random.rand(range)
Random.rand(range)
total
@quiz
c
Quiz.last.choices
Quiz.last.expression.choices
Quiz.last.expression
expression
total
@quiz.choices
c
choices << 47
choices << 45
choices
index
total
self.generate_expression
total
self.generate_expression
Quiz.generate_expression
params
c
Choice.create(answer: "#{Random.rand(range)}", correct: answer.to_i === total )
params
c
3.times quiz_question
4.times(choice)
4.times choice
3.times{answer: "#{Random.rand(range)}"}
choice
c
3.times{answer: Random.rand(range)}
choice
c
quiz_question.choices
choices
quiz_question
expression
total
random_number2
random_number1
random_number
range
params
c
current_kid
kids.kid(1) = currentKid
params
